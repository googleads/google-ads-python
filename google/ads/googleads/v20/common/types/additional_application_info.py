# -*- coding: utf-8 -*-
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
from __future__ import annotations


import proto  # type: ignore

from google.ads.googleads.v20.enums.types import (
    application_instance as gage_application_instance,
)


__protobuf__ = proto.module(
    package="google.ads.googleads.v20.common",
    marshal="google.ads.googleads.v20",
    manifest={
        "AdditionalApplicationInfo",
    },
)


class AdditionalApplicationInfo(proto.Message):
    r"""Additional information about the application/tool issuing the
    request. This field is only used by [ContentCreatorInsightsService],
    [AudienceInsightsService], and [ReachPlanService] APIs.

    Attributes:
        application_id (str):
            The unique identifier of the agency proprietary application.
            This identifier is generated by Google. Reach out to your
            Google representative to request an application_id for each
            new application being integrated.
        application_instance (google.ads.googleads.v20.enums.types.ApplicationInstanceEnum.ApplicationInstance):
            The instance type of the application sending
            the request.
    """

    application_id: str = proto.Field(
        proto.STRING,
        number=1,
    )
    application_instance: (
        gage_application_instance.ApplicationInstanceEnum.ApplicationInstance
    ) = proto.Field(
        proto.ENUM,
        number=2,
        enum=gage_application_instance.ApplicationInstanceEnum.ApplicationInstance,
    )


__all__ = tuple(sorted(__protobuf__.manifest))
